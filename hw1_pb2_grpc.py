# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import hw1_pb2 as hw1__pb2

GRPC_GENERATED_VERSION = '1.68.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in hw1_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ManageUserServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterUser = channel.unary_unary(
                '/hw1.ManageUserService/RegisterUser',
                request_serializer=hw1__pb2.RegisterUserRequest.SerializeToString,
                response_deserializer=hw1__pb2.UserActionResponse.FromString,
                _registered_method=True)
        self.UpdateTicker = channel.unary_unary(
                '/hw1.ManageUserService/UpdateTicker',
                request_serializer=hw1__pb2.UpdateTickerRequest.SerializeToString,
                response_deserializer=hw1__pb2.UserActionResponse.FromString,
                _registered_method=True)
        self.UpdateTickerRange = channel.unary_unary(
                '/hw1.ManageUserService/UpdateTickerRange',
                request_serializer=hw1__pb2.UpdateTickerRangeRequest.SerializeToString,
                response_deserializer=hw1__pb2.UpdateTickerRangeResponse.FromString,
                _registered_method=True)
        self.DeleteUser = channel.unary_unary(
                '/hw1.ManageUserService/DeleteUser',
                request_serializer=hw1__pb2.DeleteUserRequest.SerializeToString,
                response_deserializer=hw1__pb2.UserActionResponse.FromString,
                _registered_method=True)


class ManageUserServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateTicker(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateTickerRange(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ManageUserServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterUser': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterUser,
                    request_deserializer=hw1__pb2.RegisterUserRequest.FromString,
                    response_serializer=hw1__pb2.UserActionResponse.SerializeToString,
            ),
            'UpdateTicker': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateTicker,
                    request_deserializer=hw1__pb2.UpdateTickerRequest.FromString,
                    response_serializer=hw1__pb2.UserActionResponse.SerializeToString,
            ),
            'UpdateTickerRange': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateTickerRange,
                    request_deserializer=hw1__pb2.UpdateTickerRangeRequest.FromString,
                    response_serializer=hw1__pb2.UpdateTickerRangeResponse.SerializeToString,
            ),
            'DeleteUser': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteUser,
                    request_deserializer=hw1__pb2.DeleteUserRequest.FromString,
                    response_serializer=hw1__pb2.UserActionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'hw1.ManageUserService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('hw1.ManageUserService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ManageUserService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hw1.ManageUserService/RegisterUser',
            hw1__pb2.RegisterUserRequest.SerializeToString,
            hw1__pb2.UserActionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateTicker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hw1.ManageUserService/UpdateTicker',
            hw1__pb2.UpdateTickerRequest.SerializeToString,
            hw1__pb2.UserActionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateTickerRange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hw1.ManageUserService/UpdateTickerRange',
            hw1__pb2.UpdateTickerRangeRequest.SerializeToString,
            hw1__pb2.UpdateTickerRangeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hw1.ManageUserService/DeleteUser',
            hw1__pb2.DeleteUserRequest.SerializeToString,
            hw1__pb2.UserActionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class StockServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getLastStockValue = channel.unary_unary(
                '/hw1.StockService/getLastStockValue',
                request_serializer=hw1__pb2.GetLastStockValueRequest.SerializeToString,
                response_deserializer=hw1__pb2.GetLastStockValueResponse.FromString,
                _registered_method=True)
        self.getStockPriceAverage = channel.unary_unary(
                '/hw1.StockService/getStockPriceAverage',
                request_serializer=hw1__pb2.GetStockPriceAverageRequest.SerializeToString,
                response_deserializer=hw1__pb2.GetStockPriceAverageResponse.FromString,
                _registered_method=True)


class StockServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getLastStockValue(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getStockPriceAverage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StockServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getLastStockValue': grpc.unary_unary_rpc_method_handler(
                    servicer.getLastStockValue,
                    request_deserializer=hw1__pb2.GetLastStockValueRequest.FromString,
                    response_serializer=hw1__pb2.GetLastStockValueResponse.SerializeToString,
            ),
            'getStockPriceAverage': grpc.unary_unary_rpc_method_handler(
                    servicer.getStockPriceAverage,
                    request_deserializer=hw1__pb2.GetStockPriceAverageRequest.FromString,
                    response_serializer=hw1__pb2.GetStockPriceAverageResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'hw1.StockService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('hw1.StockService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class StockService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getLastStockValue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hw1.StockService/getLastStockValue',
            hw1__pb2.GetLastStockValueRequest.SerializeToString,
            hw1__pb2.GetLastStockValueResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getStockPriceAverage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hw1.StockService/getStockPriceAverage',
            hw1__pb2.GetStockPriceAverageRequest.SerializeToString,
            hw1__pb2.GetStockPriceAverageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
